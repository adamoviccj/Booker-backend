# application.properties
# Enable basic authentication for all endpoints under /api/**
spring.security.user.name=user
spring.security.user.password=password
spring.security.user.roles=USER

# ovo kopirati za logovanje
spring.datasource.url=jdbc:h2:mem:myDb
#spring.datasource.url=jdbc:h2:mem:myDb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false;MV_STORE=FALSE;MVCC=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

#spring.datasource.url=jdbc:postgresql://localhost:5432/booker
#spring.datasource.username=postgres
#spring.datasource.password=root
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.defer-datasource-initialization=true

spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto = create-drop

spring.jpa.show-sql = true

spring.jpa.properties.hibernate.format_sql=true
#spring.datasource.init-mode=always
spring.jpa.defer-datasource-initialization=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


spring.jpa.open-in-view=false

spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false


spring.h2.console.path=/h2-console

spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB

#spring.mail.host = smtp.gmail.com
#spring.mail.port = 587
#spring.mail.username = bookertim16@gmail.com
#spring.mail.password = jclnmmemlbvukqfr
#spring.mail.properties.mail.smtp.auth = true
#spring.mail.properties.mail.smtp.starttls.enable = true
#spring.mail.properties.mail.smtp.starttls.required=true
#spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com

#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/booker-realm


server.port=8081
#server.ssl.enabled=true
#server.ssl.key-alias=local_ssl
#server.ssl.key-store=classpath:localssl.p12
#server.ssl.key-store-type=JKS
#server.ssl.key-password=booker
#server.ssl.key-store-password=booker

## The format used for the keystore. It could be set to JKS in case it is a JKS file
#server.ssl.key-store-type=JKS
## The path to the keystore containing the certificate
#server.ssl.key-store=bookingapp.jks
## The password used to generate the certificate
#server.ssl.key-store-password=password
## The alias mapped to the certificate
#server.ssl.key-alias=bookingapp
##trust store location
##trust store password

#spring.security.oauth2.client.registration.keycloak.client-id=booker
#spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.keycloak.scope=openid
#
#spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/booker-realm
#spring.security.oauth2.client.provider.keycloak.user-name-attribute=bookerappuser
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/realms/booker-realm/protocol/openid-connect/certs
#logging.level.org.springframework.security=trace
spring.security.oauth2.client.registration.keycloak.client-id=booker
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/booker-realm
spring.security.oauth2.client.provider.keycloak.user-name-attribute=bookerappuser

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/booker-realm